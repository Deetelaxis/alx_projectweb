# Generated by Django 3.1 on 2024-02-21 21:16

import colorfield.fields
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import vtuapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254)),
                ('Account_Balance', models.FloatField(default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('user_type', models.CharField(choices=[('Smart Earner', 'Smart Earner'), ('Affilliate', 'Affilliate'), ('TopUser', 'TopUser'), ('API', 'API')], default='Smart Earner', max_length=30, null=True)),
                ('verify', models.BooleanField(default=False)),
                ('email_verify', models.BooleanField(default=False)),
                ('accounts', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'USERS MANAGEMENT',
            },
            managers=[
                ('objects', vtuapp.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(blank=True, max_length=500, null=True)),
                ('account_name', models.CharField(blank=True, max_length=500, null=True)),
                ('account_number', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'verbose_name_plural': 'ADMIN BANK ACCOUNT',
            },
        ),
        migrations.CreateModel(
            name='Black_List_Phone_Number',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=30)),
            ],
            options={
                'verbose_name_plural': 'BLACKLIST PHONE NUMBER',
            },
        ),
        migrations.CreateModel(
            name='Disable_Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('Data', 'Data'), ('Airtime', 'Airtime'), ('Cablesub', 'Cablesub'), ('Bill', 'Bill'), ('Bankpayment', 'Bankpayment'), ('Monnify ATM', 'Monnify ATM'), ('Monnfy bank', 'Monnify bank'), ('paystack', 'paystack'), ('Result_checker', 'Result_checker'), ('Recharge_printing', 'Recharge_printing'), ('Bulk sms', 'Bulk sms'), ('Airtime_Funding', 'Airtime_Funding')], max_length=50, unique=True)),
                ('disable', models.BooleanField(default=False, help_text='Check this box to disable this service, uncheck to unable it back')),
            ],
            options={
                'verbose_name_plural': 'DISABLE SERVICES',
            },
        ),
        migrations.CreateModel(
            name='Info_Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='alert_images')),
                ('disable', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'CREATE ALERT NOTIFICATION',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('MTN', 'MTN'), ('GLO', 'GLO'), ('AIRTEL', 'AIRTEL'), ('9MOBILE', '9MOBILE'), ('SMILE', 'SMILE'), ('SPECTRANET', 'SPECTRANET'), ('SWIFT', 'SWIFT')], max_length=30, unique=True)),
                ('status', models.CharField(choices=[('Fair', 'Fair'), ('Bad', 'Bad'), ('Strong', 'Strong')], max_length=30)),
                ('data_vending_medium', models.CharField(choices=[('SIMHOST', 'SIMHOST'), ('SMEPLUG', 'SMEPLUG'), ('SIM_SERVER', 'SIM_SERVER'), ('OGDAMS', 'OGDAMS'), ('CLOUDSIMHOST', 'CLOUDSIMHOST'), ('SMS', 'SMS'), ('MSPLUG', 'MSPLUG'), ('RINGO', 'RINGO'), ('VTUAUTO', 'VTUAUTO'), ('VTPASS', 'VTPASS'), ('SMEIFY', 'SMEIFY'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG_DEVELOPED_WEBSITE'), ('MSORG_DEVELOPED_WEBSITE_1', 'MSORG_DEVELOPED_WEBSITE_1')], max_length=30)),
                ('corporate_data_vending_medium', models.CharField(choices=[('MSORG_DEVELOPED_WEBSITE', 'MSORG_DEVELOPED_WEBSITE'), ('SMS', 'SMS'), ('OGDAMS', 'OGDAMS'), ('CLOUDSIMHOST', 'CLOUDSIMHOST'), ('UWS', 'UWS'), ('MSORG_DEVELOPED_WEBSITE_1', 'MSORG_DEVELOPED_WEBSITE_1'), ('SMEPLUG', 'SMEPLUG'), ('SIM_SERVER', 'SIM_SERVER')], max_length=30)),
                ('gifting_data_vending_medium', models.CharField(blank=True, choices=[('MSORG_DEVELOPED_WEBSITE', 'MSORG_DEVELOPED_WEBSITE'), ('SMS', 'SMS'), ('OGDAMS', 'OGDAMS'), ('CLOUDSIMHOST', 'CLOUDSIMHOST'), ('UWS', 'UWS'), ('MSORG_DEVELOPED_WEBSITE_1', 'MSORG_DEVELOPED_WEBSITE_1'), ('SMEPLUG', 'SMEPLUG'), ('SIM_SERVER', 'SIM_SERVER')], max_length=30, null=True)),
                ('vtu_vending_medium', models.CharField(choices=[('SIMHOST', 'SIMHOST'), ('SMEPLUG', 'SMEPLUG'), ('SIM_SERVER', 'SIM_SERVER'), ('OGDAMS', 'OGDAMS'), ('CLOUDSIMHOST', 'CLOUDSIMHOST'), ('SMS', 'SMS'), ('MSPLUG', 'MSPLUG'), ('RINGO', 'RINGO'), ('VTUAUTO', 'VTUAUTO'), ('VTPASS', 'VTPASS'), ('SMEIFY', 'SMEIFY'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG_DEVELOPED_WEBSITE'), ('MSORG_DEVELOPED_WEBSITE_1', 'MSORG_DEVELOPED_WEBSITE_1')], max_length=30, null=True)),
                ('msorg_web_net_id', models.CharField(max_length=5, null=True)),
                ('msorg_web_net_id_1', models.CharField(max_length=5, null=True)),
                ('share_and_sell_vending_medium', models.CharField(choices=[('SIMHOST', 'SIMHOST'), ('SMS', 'SMS'), ('MSPLUG', 'MSPLUG'), ('VTUAUTO', 'VTUAUTO'), ('SMEIFY', 'SMEIFY'), ('MSORG_DEVELOPED_WEBSITE', 'MSORG_DEVELOPED_WEBSITE'), ('MSORG_DEVELOPED_WEBSITE_1', 'MSORG_DEVELOPED_WEBSITE_1')], max_length=30, null=True)),
                ('convertion_parcentage', models.IntegerField(blank=True, null=True)),
                ('sme_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('gifting_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('corporate_gifting_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('airtime_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('data_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('data_card_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('recharge_pin_disable', models.BooleanField(blank=True, default=False, null=True)),
                ('share_and_sell_disable', models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                'verbose_name_plural': 'NETWORKS',
            },
        ),
        migrations.CreateModel(
            name='Network_1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('MTN', 'MTN'), ('AIRTEL', 'AIRTEL')], max_length=30, unique=True)),
                ('status', models.CharField(choices=[('Fair', 'Fair'), ('Bad', 'Bad'), ('Strong', 'Strong')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='ServicesCharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('Data', 'Data'), ('Airtime', 'Airtime'), ('Cablesub', 'Cablesub'), ('Bill', 'Bill'), ('Bankpayment', 'Bankpayment'), ('Monnify ATM', 'Monnify ATM'), ('Monnfy bank', 'Monnify bank'), ('paystack', 'paystack'), ('Result_checker', 'Result_checker'), ('Recharge_printing', 'Recharge_printing'), ('Bulk sms', 'Bulk sms'), ('Airtime_Funding', 'Airtime_Funding')], max_length=100, unique=True)),
                ('charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('Affilliate_charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('topuser_charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('api_charge', models.FloatField(default=0.0, help_text='Note: Extra charge , you can either set charge or Discount dont set both at once')),
                ('discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discount')),
                ('Affilliate_discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discount for affillitae users')),
                ('topuser_discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discount for topuser')),
                ('api_discount', models.FloatField(default=0.0, help_text='set charge to 0 to set discountfor api user')),
            ],
            options={
                'verbose_name_plural': 'SERVICE CHARGE',
            },
        ),
        migrations.CreateModel(
            name='user_upgrade_amount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_user_amount', models.CharField(max_length=10)),
                ('affilliate_user_amount', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intro_message', models.TextField(blank=True, default='WELOME TO DATAGIFT', null=True)),
                ('intro_message_content', models.TextField(blank=True, default='Here at DATAGIFT, we offer you the most affordable and most cheapest data, airtime, Dstv, Gotv and Startimes subscription. Here is the right place for your Electricity subscription', null=True)),
                ('about_website', models.TextField(blank=True, default='We offer instant recharge of Airtime, Databundle, CableTV (DStv, GOtv & Startimes), Electricity Bill Payment and more.', null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Customer support phone number, For call or  Whatsapp number ', max_length=13, null=True)),
                ('address', models.TextField(blank=True, default='office Address', null=True)),
                ('support_mail', models.EmailField(blank=True, help_text='support@mydomain.com or example@gmail.com', max_length=254, null=True)),
                ('primary_color', colorfield.fields.ColorField(default='#132563', image_field=None, max_length=18, samples=None)),
                ('secondary_color', colorfield.fields.ColorField(blank=True, default=None, help_text='add this color if you want to use color mixure or gradient else leave blank to use single color', image_field=None, max_length=18, null=True, samples=None)),
                ('sidebar_gb_color', colorfield.fields.ColorField(blank=True, default=None, help_text='add this color if you want the side bar of your dashboard to change color else leave blank to maintain the current color', image_field=None, max_length=18, null=True, samples=None)),
                ('website_domain', models.CharField(blank=True, help_text='example.com or example.com.ng or example.ng', max_length=50, null=True)),
                ('referral_intro_message', models.TextField(blank=True, default='Refer people to Iledodata and earn N500 immediately the person upgrade his/her account to affiliate or topuser', null=True)),
                ('support_phone_number', models.CharField(blank=True, help_text='Customer support phone number ,Whatsapp number  (start with 234)', max_length=13, null=True)),
                ('whatsapp_group_link', models.URLField(blank=True, help_text='Support group link if any', null=True)),
                ('gmail', models.EmailField(blank=True, help_text='Email to get notification on', max_length=254, null=True)),
                ('sms_notification_number', models.CharField(blank=True, help_text='Enter the phone number to recieve SMS notifications on', max_length=500, null=True)),
                ('Paystack_secret_key', models.CharField(blank=True, help_text='Enter your Paystack SCRET API KEY here if you are using Paystack, else leave blank', max_length=500, null=True)),
                ('monnify_API_KEY', models.CharField(blank=True, help_text='Enter your monnify  API_KEY here if you are using monnify  else leave blank', max_length=500, null=True)),
                ('monnify_SECRET_KEY', models.CharField(blank=True, help_text='Enter your monnify Secret Key here if you are using monnify else leave blank', max_length=500, null=True)),
                ('monnify_contract_code', models.CharField(blank=True, help_text='Enter your monnify contarct code here if you are using monnify else leave blank', max_length=500, null=True)),
                ('monnify_manual_funding_charge_type', models.CharField(blank=True, choices=[('FIFTHY_NAIRA', 'FIFTHY_NAIRA'), ('ONE_PERCENT', 'ONE_PERCENT'), ('ONE_POINT_TWO_PERCENT', 'ONE_POINT_TWO_PERCENT'), ('ONE_POINT_FIVE_PERCENT', 'ONE_POINT_FIVE_PERCENT')], default='FIFTHY_NAIRA', max_length=30, null=True)),
                ('Payvessel_api_key', models.CharField(blank=True, help_text='Enter your Payvessel  api key here if you are using Payvessel  else leave blank', max_length=500, null=True)),
                ('Payvessel_secret_key', models.CharField(blank=True, help_text='Enter your Payvessel Secret Key here if you are using Payvessel else leave blank', max_length=500, null=True)),
                ('Payvessel_business_id', models.CharField(blank=True, help_text='Enter your Payvessel business id here if you are using Payvessel else leave blank', max_length=500, null=True)),
                ('Payvessel_manual_funding_charge_type', models.CharField(blank=True, choices=[('THIRTY_NAIRA', 'THIRTY_NAIRA'), ('THIRTY_FIVE_NAIRA', 'THIRTY_FIVE_NAIRA'), ('ONE_PERCENT', 'ONE_PERCENT'), ('ONE_POINT_TWO_PERCENT', 'ONE_POINT_TWO_PERCENT'), ('ONE_POINT_FIVE_PERCENT', 'ONE_POINT_FIVE_PERCENT')], default='THIRTY_FIVE_NAIRA', max_length=30, null=True)),
                ('bank_manual_funding_limit', models.PositiveIntegerField(default=5000, help_text='minimum amount allowed for FUND WITH MANUAL BANK TRANSFER')),
                ('bank_manual_funding_warning_message', models.TextField(blank=True, default='Your account will be suspended if you submit without transfer \n Please note that there is a charge of N50 if the amount greater than N9,999.', null=True)),
                ('ringo_email', models.CharField(blank=True, help_text='Enter your RINGO Email here if you are using VTpass else leave blank', max_length=500, null=True)),
                ('ringo_password', models.CharField(blank=True, help_text='Enter your RINGO password here if you are using VTpass else leave blank', max_length=500, null=True)),
                ('vtpass_email', models.CharField(blank=True, help_text='Enter your Vtpass Email here if you are using VTpass else leave blank', max_length=500, null=True)),
                ('vtpass_password', models.CharField(blank=True, help_text='Enter your Vtpass password here if you are using VTpass else leave blank', max_length=500, null=True)),
                ('hollatag_username', models.CharField(blank=True, help_text='Enter your hollatag username here if you are using hollatag else leave blank', max_length=500, null=True)),
                ('hollatag_password', models.CharField(blank=True, help_text='Enter your hollatag  password here if you are using hollatag else leave blank', max_length=500, null=True)),
                ('sme_plug_secret_key', models.CharField(blank=True, help_text='Enter your SMEPLUG SECRET API KEY here if you are using SMEplug else leave blank', max_length=500, null=True)),
                ('simserver_api_key', models.CharField(blank=True, help_text='Enter your SIMSERVER  API KEY here if you are using SIMSERVER else leave blank', max_length=500, null=True)),
                ('ogdams_api_key', models.CharField(blank=True, help_text='Enter your OGDAMS SECRET API KEY here if you are using OGDAMS else leave blank', max_length=500, null=True)),
                ('cloudsimhost_api_key', models.CharField(blank=True, help_text='Enter your CLOUDSIMHOST SECRET API KEY here if you are using CLOUDSIMHOST else leave blank', max_length=500, null=True)),
                ('simhost_API_key', models.CharField(blank=True, help_text='Enter your simhost APIKEY here if you are using simhost else leave blank', max_length=500, null=True)),
                ('msplug_API_key', models.CharField(blank=True, help_text='Enter your msplug APIKEY here if you are using msplug else leave blank', max_length=500, null=True)),
                ('vtu_auto_email', models.CharField(blank=True, help_text='Enter your vtuauto Email here if you are using vtuauto else leave blank', max_length=500, null=True)),
                ('vtu_auto_password', models.CharField(blank=True, help_text='Enter your vtuauto Password here if you are using vtuauto else leave blank', max_length=500, null=True)),
                ('mobilenig_username', models.CharField(blank=True, help_text='Enter your mobilenig username here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('mobilenig_api_key', models.CharField(blank=True, help_text='Enter your mobilenig APIKEY here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('idchecker_api_key', models.CharField(blank=True, help_text='Enter your mobilenig APIKEY here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('uws_token', models.TextField(blank=True, null=True)),
                ('msorg_web_url', models.CharField(blank=True, max_length=500, null=True)),
                ('msorg_web_api_key', models.CharField(blank=True, help_text='Enter your msorg APIKEY here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('msorg_web_url_1', models.CharField(blank=True, max_length=500, null=True)),
                ('msorg_web_api_key_1', models.CharField(blank=True, help_text='Enter your msorg1 APIKEY here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('msorg_web_url_2', models.CharField(blank=True, max_length=500, null=True)),
                ('msorg_web_api_key_2', models.CharField(blank=True, help_text='Enter your msorg2 APIKEY here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('msorg_web_url_3', models.CharField(blank=True, max_length=500, null=True)),
                ('msorg_web_api_key_3', models.CharField(blank=True, help_text='Enter your msorg2 APIKEY here if you are using mobilenig else leave blank', max_length=500, null=True)),
                ('easyaccess_api_key', models.CharField(blank=True, help_text='Enter your easyaccess APIKEY here if you are using easyaccess else leave blank', max_length=500, null=True)),
                ('bulksms9ja_api_token', models.CharField(blank=True, help_text='Enter your API Token here if you are using bulksmsnigeria.com', max_length=500, null=True)),
                ('smartsms_api_token', models.CharField(blank=True, help_text='Enter your API Token here if you are using smartsmssolutions.com', max_length=500, null=True)),
                ('ResultCheckerSource', models.CharField(blank=True, choices=[('API', 'API'), ('MANUAL', 'MANUAL')], default='API', max_length=50, null=True)),
                ('Cable_provider', models.CharField(blank=True, choices=[('VTPASS', 'VTPASS'), ('RINGO', 'RINGO'), ('SAGE_CLOUD', 'SAGE_CLOUD')], default='VTPASS', max_length=50, null=True)),
                ('Bill_provider', models.CharField(blank=True, choices=[('VTPASS', 'VTPASS'), ('RINGO', 'RINGO'), ('SAGE_CLOUD', 'SAGE_CLOUD')], default='VTPASS', max_length=50, null=True)),
                ('BulkSMS_provider', models.CharField(blank=True, choices=[('VTPass', 'VTPass'), ('HOLLATAGS', 'HOLLATAGS'), ('BulkSMS9ja', 'BulkSMS9ja'), ('SMART_SMS_SOLUTION', 'SMART_SMS_SOLUTION')], default='HOLLATAGS', max_length=50, null=True)),
                ('affiliate_upgrade_fee', models.IntegerField(blank=True, default=2000, null=True)),
                ('topuser_upgrade_fee', models.IntegerField(blank=True, default=5000, null=True)),
                ('disable_Transactions_pin', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=False, help_text='(i.e If disabled All user would have access of purchasing all product without the need of transactions pins )', max_length=50, verbose_name='Disable Transactions pin')),
                ('disable_User_upgrade', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=False, help_text='(i.e all user should be on the same user type like SMART EARNER)', max_length=50, verbose_name='Disable Upgrade User')),
                ('disable_first_funding_referral_type', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=False, max_length=50, verbose_name='Disable First payment Refferal Type')),
                ('disable_user_upgrade_referral_type', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=False, max_length=50, verbose_name='Disable User Upgrade Refferal Type')),
                ('first_payment_referral_bonus', models.FloatField(blank=True, default=0.02, help_text='set amount in percentage fraction (e.g 0.02 = 2% or 0.05 = 5% of the first payment) which upline/referee earns when downline/referral make their first payment', null=True)),
                ('affiliate_referral_bonus', models.IntegerField(blank=True, default=500, help_text='set amount upline/referee earns when downline/referral upgrades to Affiliate package', null=True)),
                ('topuser_referral_bonus', models.IntegerField(blank=True, default=1000, help_text='set amount upline/referee earns when downline/referral upgrades to TopUser package', null=True)),
                ('email_verification', models.BooleanField(choices=[(True, 'ENABLE'), (False, 'DISABLE')], default=True, max_length=50, verbose_name='Disable email Verification')),
                ('unverified_users_airtime_TopUp_per_once_limit', models.PositiveIntegerField(default=5000, help_text='maximum amount of Airtime TopUp allowed for unverified users per once')),
                ('disable_Transaction_limit', models.BooleanField(choices=[(True, 'YES'), (False, 'NO')], default=False, max_length=50, verbose_name='Disable Transaction limit for unverified user')),
                ('unverified_users_daily_withdraws_limit', models.PositiveIntegerField(default=5000, help_text='maximum amount of withdrawal allowed for unverified users DAILY')),
                ('unverified_users_transfer_limit', models.PositiveIntegerField(default=5000, help_text='total amount of transfer allowed for unverified users DAILY')),
                ('unverified_users_daily_transation_limit', models.PositiveIntegerField(default=30000, help_text='total amount of transaction allowed for unverified users DAILY')),
            ],
            options={
                'verbose_name_plural': 'WEBSITE CONFIGURATIONS',
            },
        ),
        migrations.CreateModel(
            name='Wallet_summary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(blank=True, max_length=500)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('previous_balance', models.CharField(blank=True, max_length=30)),
                ('after_balance', models.CharField(blank=True, max_length=30, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='successful', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=vtuapp.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'USERS WALLET SUMMARY',
            },
        ),
        migrations.CreateModel(
            name='Wallet_Funding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medium', models.CharField(blank=True, editable=False, max_length=500)),
                ('amount', models.CharField(blank=True, editable=False, max_length=30)),
                ('previous_balance', models.CharField(blank=True, editable=False, max_length=30)),
                ('after_balance', models.CharField(blank=True, editable=False, max_length=30, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('ident', models.CharField(default=vtuapp.models.create_id, editable=False, max_length=30)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallet_funding', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'WALLET FUNDING TRACKING',
            },
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('balance_before', models.FloatField(blank=True, null=True)),
                ('balance_after', models.FloatField(blank=True, null=True)),
                ('transaction_type', models.CharField(blank=True, max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'WALLET TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='TopupPercentage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent', models.IntegerField()),
                ('Affilliate_percent', models.IntegerField(default=100)),
                ('topuser_percent', models.IntegerField(default=100)),
                ('api_percent', models.IntegerField(default=100)),
                ('share_n_sell_percent', models.IntegerField(default=100)),
                ('share_n_sell_api_percent', models.IntegerField(default=100)),
                ('share_n_sell_affilliate_percent', models.IntegerField(default=100)),
                ('share_n_sell_topuser_percent', models.IntegerField(default=100)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vtuapp.network')),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TOPUP PERCENTAGE',
            },
        ),
        migrations.CreateModel(
            name='SME_text',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=100)),
                ('text_to_search', models.CharField(blank=True, max_length=100, null=True)),
                ('pin', models.CharField(blank=True, help_text='DATA PIN if any', max_length=10, null=True)),
                ('vtu_pin', models.CharField(blank=True, max_length=10, null=True)),
                ('share_and_sell_pin', models.CharField(blank=True, max_length=10, null=True)),
                ('sim_host_server_id', models.CharField(blank=True, help_text='If you are using simhost', max_length=500, null=True)),
                ('vtu_auto_device_id', models.CharField(blank=True, help_text='If you are using VTU AUTO', max_length=500, null=True)),
                ('vtu_sim_slot', models.IntegerField(blank=True, help_text='If you are using VTU AUTO i.e enter 1 for sim1', null=True)),
                ('msplug_device_id', models.CharField(blank=True, help_text='If you are using MSPLUG ', max_length=500, null=True)),
                ('msplug_sim_slot', models.CharField(blank=True, choices=[('sim1', 'sim1'), ('sim2', 'sim2')], help_text='If you are using MSPLUG i.e enter sim1 for sim1, sim2 for sim2', max_length=5, null=True)),
                ('mtn_sme_route', models.CharField(blank=True, choices=[('SMS', 'SMS'), ('USSD', 'USSD')], help_text='Select either SMS  to 131 or USSD  ', max_length=500, null=True)),
                ('network', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='vtuapp.network')),
            ],
            options={
                'verbose_name_plural': 'SIM MANAGEMENT',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_size', models.FloatField()),
                ('plan_Volume', models.CharField(choices=[('MB', 'MB'), ('GB', 'GB'), ('TB', 'TB')], max_length=30)),
                ('plan_amount', models.PositiveIntegerField()),
                ('plan_name_id', models.CharField(blank=True, max_length=500, null=True)),
                ('plan_type', models.CharField(blank=True, choices=[('CORPORATE GIFTING', 'CORPORATE GIFTING'), ('GIFTING', 'GIFTING'), ('SME', 'SME')], help_text='Data plan  type only .', max_length=30)),
                ('month_validate', models.CharField(max_length=30)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vtuapp.network')),
            ],
            options={
                'verbose_name_plural': 'DATA PLANS',
            },
        ),
        migrations.CreateModel(
            name='paymentgateway',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.TextField(blank=True, max_length=50, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('gateway', models.CharField(default='Paystack', max_length=30)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'PAYMENT GATEWAY TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='LoggedInUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=32, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(blank=True, choices=[('CORPORATE GIFTING', 'CORPORATE GIFTING'), ('GIFTING', 'GIFTING'), ('SME', 'SME')], help_text='Select Plan Type SME or GIFTING or CORPORATE GIFTING', max_length=30, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('medium', models.CharField(default='website', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('balance_before', models.CharField(blank=True, max_length=30)),
                ('balance_after', models.CharField(blank=True, max_length=30, null=True)),
                ('plan_amount', models.CharField(blank=True, max_length=30)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('ident', models.CharField(default=vtuapp.models.create_id, editable=False, max_length=30)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('api_response', models.TextField(blank=True, default='')),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='vtuapp.network')),
                ('plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='vtuapp.plan')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'DATA TOP-UP TRANSACTIONS',
            },
        ),
        migrations.CreateModel(
            name='Bankpayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Bank_paid_to', models.CharField(blank=True, max_length=15, null=True)),
                ('Reference', models.CharField(blank=True, max_length=15, null=True)),
                ('amount', models.CharField(blank=True, max_length=30, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ident', models.CharField(default=vtuapp.models.create_id, editable=False, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', max_length=30)),
                ('fund', models.BooleanField(blank=True, default=False, null=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'MANUAL BANK FUNDING',
            },
        ),
        migrations.CreateModel(
            name='AirtimeTopup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_number', models.CharField(blank=True, max_length=30)),
                ('airtime_type', models.CharField(choices=[('VTU', 'VTU'), ('Share and Sell', 'Share and Sell')], default='VTU', help_text='VTU or share and Sell', max_length=30)),
                ('amount', models.CharField(blank=True, max_length=30)),
                ('paid_amount', models.CharField(blank=True, max_length=30)),
                ('Status', models.CharField(choices=[('processing', 'processing'), ('failed', 'Failed'), ('successful', 'Successful')], default='processing', help_text='Select failed and save to refund user', max_length=30)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('balance_before', models.CharField(blank=True, max_length=30)),
                ('balance_after', models.CharField(blank=True, max_length=30)),
                ('Ported_number', models.BooleanField(blank=True, default=False, null=True)),
                ('medium', models.CharField(default='website', max_length=30)),
                ('ident', models.CharField(default=vtuapp.models.create_id, editable=False, max_length=300)),
                ('refund', models.BooleanField(blank=True, default=False, null=True)),
                ('network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='vtuapp.network')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'AIRTIME TOPUP TRANSACTIONS',
            },
        ),
    ]
